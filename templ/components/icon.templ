package components

import "strings"

// Helper to render Material Icons with optional subtype suffix in the icon name.
// If the icon string ends with one of: -outline, -rounded, -sharp, -two-tone
// then we use the corresponding class: material-icons-[suffix] and remove the suffix from the glyph name.
// Examples:
//  - "home" -> class: material-icons, text: home
//  - "home-round" -> class: material-icons-round, text: home
//  - "favorite-two-tone" -> class: material-icons-two-tone, text: favorite

func materialIconClass(icon string) string {
	if strings.HasSuffix(icon, "-outlined") {
		return "material-icons-outlined"
	}
	if strings.HasSuffix(icon, "-round") {
		return "material-icons-round"
	}
	if strings.HasSuffix(icon, "-sharp") {
		return "material-icons-sharp"
	}
	if strings.HasSuffix(icon, "-two-tone") {
		return "material-icons-two-tone"
	}
	return "material-icons"
}

func materialIconText(icon string) string {
	if strings.HasSuffix(icon, "-outlined") {
		return strings.TrimSuffix(icon, "-outlined")
	}
	if strings.HasSuffix(icon, "-round") {
		return strings.TrimSuffix(icon, "-round")
	}
	if strings.HasSuffix(icon, "-sharp") {
		return strings.TrimSuffix(icon, "-sharp")
	}
	if strings.HasSuffix(icon, "-two-tone") {
		return strings.TrimSuffix(icon, "-two-tone")
	}
	return icon
}

// Helpers to compute a unified span class and inner text for icons without branching in templates.
func IconClass(iconType string, name string) string {
	// Normalize baseline, size, and vertical alignment relative to text.
	// Use inline-block so it aligns with surrounding text baseline; enforce 1em box.
	base := "inline-block align-middle leading-none w-[1em] h-[1em]"
	if iconType == "mdi" {
		// Material icons: slightly stronger upward nudge to appear visually centered; avoids line-height changes.
		return base + " -translate-y-[2px] " + materialIconClass(name)
	}
	// Simple Icons: no extra nudge.
	return base + "  -translate-y-[2px] si si-" + name
}

func IconText(iconType string, name string) string {
	if iconType == "mdi" {
		return materialIconText(name)
	}
	return ""
}

// Ensure templ packages are referenced so generated imports are used.
var _ = templruntime.GeneratedTemplate
var _ = templ.Component(nil)
