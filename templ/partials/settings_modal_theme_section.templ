package partials

import "fmt"

type SettingsModalThemeSectionInputTheme struct {
	ID          uint
	DisplayName string
	Primary     string
	Secondary   string
	Tertiary    string
	Deletable   bool
}

type SettingsModalThemeSectionInputCurrentTheme struct {
	Primary   string
	Secondary string
	Tertiary  string
}

type SettingsModalThemeSectionInputSettings struct {
	ThemeID uint
}

type SettingsModalThemeSectionInput struct {
	Themes   []SettingsModalThemeSectionInputTheme
	Current  SettingsModalThemeSectionInputCurrentTheme
	Settings *SettingsModalThemeSectionInputSettings
}

templ SettingsModalThemeSection(input SettingsModalThemeSectionInput) {
	<div id="themes-section">
		<h2 class="text-lg font-semibold mb-4 text-secondary">Themes</h2>
		<ul class="space-y-2">
			for _, t := range input.Themes {
				<li class="flex flex-wrap items-center justify-between gap-3 p-3 rounded-xl bg-tertiary/10">
					<div class="flex items-center gap-3 min-w-0">
						<span class="inline-block w-4 h-4 rounded" style={ "background: " + t.Primary }></span>
						<span class="inline-block w-4 h-4 rounded" style={ "background: " + t.Secondary }></span>
						<span class="inline-block w-4 h-4 rounded" style={ "background: " + t.Tertiary }></span>
						<span class="text-sm text-tertiary truncate">{ t.DisplayName }</span>
					</div>
					<div class="flex items-center w-full sm:w-auto sm:ml-auto">
						if t.Deletable {
							<button
								hx-delete={ "/themes/" + fmt.Sprint(t.ID) }
								hx-target="#themes-section"
								hx-swap="outerHTML"
								class="px-4 h-9 rounded-lg text-primary bg-tertiary/80 hover:bg-tertiary transition-colors duration-200 cursor-pointer text-sm border border-transparent w-full sm:w-auto"
							>
								Delete
							</button>
						} else {
							<button class="px-4 h-9 rounded-lg text-sm opacity-50 border border-tertiary w-full sm:w-auto" aria-disabled="true" disabled>Delete</button>
						}
					</div>
				</li>
			}
		</ul>
		<form
			hx-post="/themes"
			hx-target="#themes-section"
			hx-swap="outerHTML"
			class="mt-2 flex flex-wrap items-center gap-3 p-3 rounded-xl bg-tertiary/10 sm:flex-nowrap"
		>
			<div class="flex items-center gap-3 flex-1 min-w-0">
				<label class="sr-only" for="primary">Primary color</label>
				<input
					type="color"
					id="primary"
					name="primary"
					value={ input.Current.Primary }
					class="inline-block w-4 h-4 rounded"
				/>
				<label class="sr-only" for="secondary">Secondary color</label>
				<input
					type="color"
					id="secondary"
					name="secondary"
					value={ input.Current.Secondary }
					class="inline-block w-4 h-4 rounded"
				/>
				<label class="sr-only" for="tertiary">Tertiary color</label>
				<input
					type="color"
					id="tertiary"
					name="tertiary"
					value={ input.Current.Tertiary }
					class="inline-block w-4 h-4 rounded"
				/>
				<label class="sr-only" for="name">Name</label>
				<input
					id="name"
					name="display_name"
					placeholder="Name"
					class="flex-1 min-w-0 w-full text-sm text-tertiary bg-transparent focus:outline-none"
					required
				/>
			</div>
			<div class="flex items-center shrink-0 w-full sm:w-auto sm:ml-auto">
				<button class="px-4 h-9 rounded-lg text-primary bg-tertiary/80 hover:bg-tertiary transition-colors duration-200 cursor-pointer whitespace-nowrap text-sm w-full sm:w-auto">
					Create
				</button>
			</div>
		</form>
		<div class="mt-4 text-secondary text-xs">
			Find color palette of the default theme at <a href="https://catppuccin.com/palette" target="_blank" class="text-tertiary hover:underline">Catppuccin Palette</a>.
		</div>
	</div>
	if input.Settings != nil {
		<div id="settings-theme-select" hx-swap-oob="outerHTML">
			<label for="theme-id" class="block text-sm font-medium text-secondary">Theme</label>
			<select id="theme-id" name="theme_id" class="mt-1 block w-full rounded-lg bg-primary border border-tertiary text-secondary p-2 focus:outline-none focus:border-tertiary/80">
				for _, theme := range input.Themes {
					if theme.ID == input.Settings.ThemeID {
						<option value={ fmt.Sprint(theme.ID) } selected>{ theme.DisplayName }</option>
					} else {
						<option value={ fmt.Sprint(theme.ID) }>{ theme.DisplayName }</option>
					}
				}
			</select>
		</div>
	}
}
