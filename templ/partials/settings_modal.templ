package partials

import "fmt"

type SettingsModalInputTheme struct {
	ID          uint
	DisplayName string
}

type SettingsModalInputLanguage struct {
	Code        string
	DisplayName string
}

type SettingsModalInputTimeZone struct {
	TimeZone    string
	DisplayName string
}

type SettingsModalInputSettings struct {
	ThemeID  uint
	Language string
	TimeZone string
}

type SettingsModalInput struct {
	Settings  SettingsModalInputSettings
	Themes    []SettingsModalInputTheme
	Languages []SettingsModalInputLanguage
	TimeZones []SettingsModalInputTimeZone
}

templ SettingsModal(input SettingsModalInput) {
	<div id="modal" class="fixed inset-0 bg-primary/70 backdrop-blur-xs h-full w-full flex items-start justify-center md:items-center overflow-y-auto">
		<div class="relative mt-6 md:mt-0 py-4 px-6 border border-tertiary w-11/12 md:w-[36rem] shadow-xl rounded-xl bg-primary max-h-[90vh] overflow-y-auto">
			<div class="flex justify-between items-center mt-3 pb-3">
				<p class="text-lg font-bold text-secondary mr-12 md:mr-24">Settings</p>
				<button
					class="text-tertiary text-2xl hover:text-tertiary/80 transition-colors duration-200 cursor-pointer"
					hx-get="/dashboard/modal/close"
					hx-target="#modal"
					hx-swap="outerHTML"
				>
					<span class="material-icons-round">close</span>
				</button>
			</div>
			<div id="modal-content" class="mt-3 pb-3">
				<form hx-put="/settings" hx-target="#modal" hx-swap="outerHTML" class="space-y-4">
					<div id="settings-theme-select">
						<label for="theme-id" class="block text-sm font-medium text-secondary">Theme</label>
						<select id="theme-id" name="theme_id" class="mt-1 block w-full rounded-lg bg-primary border border-tertiary text-secondary p-2 focus:outline-none focus:border-tertiary/80 cursor-pointer">
							for _, t := range input.Themes {
								if t.ID == input.Settings.ThemeID {
									<option value={ fmt.Sprint(t.ID) } selected>{ t.DisplayName }</option>
								} else {
									<option value={ fmt.Sprint(t.ID) }>{ t.DisplayName }</option>
								}
							}
						</select>
					</div>
					<div>
						<label for="language" class="block text-sm font-medium text-secondary mb-2">
							Language
							<span class="inline-flex items-center ml-1 px-2 py-0.5 rounded text-xs font-medium bg-tertiary/20 text-tertiary/80">coming soon</span>
						</label>
						<select id="language" name="language" class="mt-1 block w-full rounded-lg bg-primary/50 border border-tertiary text-secondary/70 p-2" disabled>
							for _, l := range input.Languages {
								if l.Code == input.Settings.Language {
									<option value={ l.Code } selected>{ l.DisplayName }</option>
								} else {
									<option value={ l.Code }>{ l.DisplayName }</option>
								}
							}
						</select>
					</div>
					<div>
						<label for="time-zone" class="block text-sm font-medium text-secondary mb-2">
							Time Zone
							<span class="inline-flex items-center ml-1 px-2 py-0.5 rounded text-xs font-medium bg-tertiary/20 text-tertiary/80">coming soon</span>
						</label>
						<select id="time-zone" name="time_zone" class="mt-1 block w-full rounded-lg bg-primary/50 border border-tertiary text-secondary/70 p-2" disabled>
							for _, tz := range input.TimeZones {
								if tz.TimeZone == input.Settings.TimeZone {
									<option value={ tz.TimeZone } selected>{ tz.DisplayName }</option>
								} else {
									<option value={ tz.TimeZone }>{ tz.DisplayName }</option>
								}
							}
						</select>
					</div>
					<div class="flex justify-end gap-2">
						<button type="submit" class="px-4 py-2 rounded-lg text-primary bg-tertiary/80 hover:bg-tertiary transition-colors duration-200 cursor-pointer">
							Save
						</button>
					</div>
				</form>
		        <hr class="my-6 border-tertiary"/>
				<div id="themes-section" hx-get="/settings/modal/themes" hx-trigger="load" hx-target="#themes-section" hx-swap="outerHTML"></div>
			</div>
		</div>
	</div>
}
